import React from "react";
import { 
  LineChart, Line, 
  BarChart, Bar, 
  XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend 
} from "recharts";

// Gi·∫£ l·∫≠p d·ªØ li·ªáu s·∫£n ph·∫©m
const generateProductData = (count, min, max) => {
  const categories = ["√Åo", "Gi√†y", "T√∫i", "ƒê·ªìng h·ªì", "Qu·∫ßn", "M≈©", "Balo"];
  return Array.from({ length: count }, (_, index) => ({
    name: `${categories[index % categories.length]} ${index + 1}`,
    s·ªë_l∆∞·ª£ng: Math.floor(Math.random() * (max - min + 1)) + min,
  }));
};

const productCount = 10; // T·ªïng s·ªë s·∫£n ph·∫©m
const visibleProducts = 10; // S·ªë l∆∞·ª£ng hi·ªÉn th·ªã ban ƒë·∫ßu
const dataProducts = generateProductData(productCount, 0, 20); // C√≥ th·ªÉ c√≥ s·∫£n ph·∫©m h·∫øt h√†ng

const ProductAnalytics = () => {
  // T√¨m s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
  const bestSellingProduct = dataProducts.reduce((max, product) => 
    product.s·ªë_l∆∞·ª£ng > max.s·ªë_l∆∞·ª£ng ? product : max, dataProducts[0]);

  // ƒê·∫øm s·ªë l∆∞·ª£ng s·∫£n ph·∫©m h·∫øt h√†ng
  const outOfStockCount = dataProducts.filter(product => product.s·ªë_l∆∞·ª£ng === 0).length;

  const outInStockCount = dataProducts.filter(product => product.s·ªë_l∆∞·ª£ng > 10).length;

  return (
    <div className="product-analytics-container">
      <h4 className="title">üìä Th·ªëng k√™ s·∫£n ph·∫©m ({productCount}+ s·∫£n ph·∫©m)</h4>

      {/* Th√¥ng tin s·∫£n ph·∫©m ƒë·∫∑c bi·ªát */}
      <div className="product-info">
        <p>üî• <strong>S·∫£n ph·∫©m b√°n ch·∫°y:</strong> {bestSellingProduct.name} ({bestSellingProduct.s·ªë_l∆∞·ª£ng} s·∫£n ph·∫©m)</p>
        <p>üìâ <strong>S·∫£n ph·∫©m h·∫øt h√†ng:</strong> {outOfStockCount} s·∫£n ph·∫©m</p>
        <p>üì¶ <strong>S·∫£n ph·∫©m t·ªìn kho:</strong> {outInStockCount} s·∫£n ph·∫©m</p>
      </div>

      <div className="chart-card" 
        style={{ 
          overflowX: "auto", 
          paddingBottom: "20px",
          maxHeight: "350px", // Gi·ªõi h·∫°n chi·ªÅu cao t·ªëi ƒëa
          display: "flex",
          flexDirection: "column"
        }}
      >
        <h5 className="chart-title">üìà Th·ªëng k√™ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m</h5>
        <div 
          style={{ 
            minWidth: productCount > visibleProducts ? productCount * 15 : "100%", 
            flex: 1
          }}
        >
          <ResponsiveContainer width="100%" height={350}>
            {productCount > 50 ? (
              // Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng n·∫øu s·ªë s·∫£n ph·∫©m nhi·ªÅu
              <LineChart data={dataProducts}>
                <CartesianGrid strokeDasharray="3 3" stroke="#ddd" />
                <XAxis dataKey="name" angle={-45} textAnchor="end" height={70} />
                <YAxis />
                <Tooltip cursor={{ stroke: "#64B5F6", strokeWidth: 1 }} />
                <Legend />
                <Line 
                  type="monotone" 
                  dataKey="s·ªë_l∆∞·ª£ng" 
                  stroke="#64B5F6" 
                  strokeWidth={3} 
                  dot={{ r: 4, fill: "#64B5F6" }} 
                />
              </LineChart>
            ) : (
              // Bi·ªÉu ƒë·ªì c·ªôt ngang n·∫øu s·∫£n ph·∫©m √≠t
              <BarChart layout="vertical" data={dataProducts} barCategoryGap="25%">
                <CartesianGrid strokeDasharray="3 3" stroke="#ddd" />
                <XAxis type="number" />
                <YAxis type="category" dataKey="name" width={150} />
                <Tooltip cursor={{ fill: "#e3f2fd" }} />
                <Legend />
                <Bar 
                  dataKey="s·ªë_l∆∞·ª£ng" 
                  fill="#64B5F6" 
                  radius={[10, 10, 0, 0]} 
                />
              </BarChart>
            )}
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );
};

export default ProductAnalytics;
